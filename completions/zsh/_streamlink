#compdef streamlink

# AUTOMATICALLY GENERATED by `shtab`


_shtab_streamlink_cli_commands() {
  local _commands=(
    
  )
  _describe 'streamlink commands' _commands
}

_shtab_streamlink_cli_options=(
  {-h,--help}"[
        Show this help message and exit.
        ]"
  "(- : *)"{-V,--version}"[
        Show version number and exit.
        ]"
  "--plugins[
        Print a list of all currently installed plugins.
        ]"
  "--plugin-dirs[
        Attempts to load plugins from these directories.

        Multiple directories can be used by separating them with a comma.
        ]:plugin_dirs:"
  "--can-handle-url[
        Check if Streamlink has a plugin that can handle the specified URL.

        Returns status code \`1\` for false and \`0\` for true.

        Useful for external scripting.
        ]:can_handle_url:"
  "--can-handle-url-no-redirect[
        Same as --can-handle-url but without following redirects when looking up
        the URL.
        ]:can_handle_url_no_redirect:"
  "*--config[
        Load options from this config file.

        Can be repeated to load multiple files, in which case the options are
        merged on top of each other where the last config has highest priority.
        ]:config:"
  "--no-config[
        Disable loading any default or custom config files.
        ]"
  {-l,--loglevel}"[
        Set the log message threshold.

        Valid levels are, in order of increasing verbosity\:

        \`none\`, \`critical\`, \`error\`, \`warning\`, \`info\`, \`debug\`, \`trace\`, \`all\`

        Default is \"info\".
        ]:loglevel:(none critical error warning info debug trace all)"
  "--logfile[
        Append log output to \`FILE\` instead of writing to stdout\/stderr.

        User prompts and download progress won\'t be written to \`FILE\`.

        A value of \`-\` (dash) will set the file name to an ISO8601-like string
        and will choose the following default log directories.

        Windows\:

          \%\%TEMP\%\%\\streamlink\\logs

        macOS\:

          \$\{HOME\}\/Library\/Logs\/streamlink

        Linux\/BSD\:

          \$\{XDG_STATE_HOME\:-\$\{HOME\}\/.local\/state\}\/streamlink\/logs
        ]:logfile:"
  {-Q,--quiet}"[
        Hide all log output.

        Alias for \`--loglevel none\`.
        ]"
  {-j,--json}"[
        Output JSON representations instead of the normal text output.

        Useful for external scripting.
        ]"
  "--auto-version-check[
        Enable or disable the automatic check for a new version of Streamlink.

        Default is \"no\".
        ]:auto_version_check:"
  "--version-check[
        Runs a version check and exits.
        ]"
  "--locale[
        The preferred locale setting, for selecting the preferred subtitle and
        audio language.

        The locale is formatted as \`\[language_code\]_\[country_code\]\`, eg. \`en_US\` or
        \`es_ES\`.

        Default is system locale.
        ]:locale:"
  "--interface[
        Set the network interface.
        ]:interface:"
  {-4,--ipv4}"[
        Resolve address names to IPv4 only. This option overrides --ipv6.
        ]"
  {-6,--ipv6}"[
        Resolve address names to IPv6 only. This option overrides --ipv4.
        ]"
  {-p,--player}"[
        The player executable that will be launched (unless a different output method was chosen).

        Either set an absolute or relative path to the player executable, or just set the executable\'s name
        if it can be resolved from the paths of the system\'s \`PATH\` environment variable.

        In addition to setting the player executable path, custom player arguments can be set via --player-args.

        Note\: In the past, --player allowed defining additional player arguments, which as a consequence required wrapping
        player paths that contained spaces in quotation marks. This is unsupported since release \`6.0.0\`.

        Default is VLC player, if available.
        ]:player:"
  {-a,--player-args}"[
        This option allows the arguments which are used to launch the player process to be customized.

        The value can contain formatting variables surrounded by curly braces, \`\{\` and \`\}\`.
        Curly brace characters can be escaped by doubling, e.g. \`\{\{\` and \`\}\}\`.

        Available formatting variables\:

        \`\{playerinput\}\`
            This is the input argument that the player will receive. For standard input (stdin),
            it is \`-\` (dash), but it can also be a file path or URL, depending on the options used.
            If unset, then the player input argument will be appended to the parsed player arguments list.

        \`\{playertitleargs\}\`
            The automatically generated player title arguments, if a supported player was found. See --title for more.
            If unset, automatically generated player title arguments will be prepended to the parsed player arguments list.

        Example\:

          \%(prog)s -p vlc -a \"--play-and-exit --no-one-instance\" \<url\> \[stream\]

        Default is \"\".
        ]:player_args:"
  {-v,--verbose-player}"[
        Allow the player to display its console output.
        ]"
  {-n,--player-fifo,--fifo}"[
        Make the player read the stream through a named pipe instead of the
        stdin pipe.
        ]"
  "--player-http[
        Make the player read the stream through HTTP instead of the stdin pipe.
        ]"
  "--player-continuous-http[
        Make the player read the stream through HTTP, but unlike --player-http
        it will continuously try to open the stream if the player requests it.

        This makes it possible to handle stream disconnects if your player is
        capable of reconnecting to a HTTP stream. This is usually done by
        setting your player to a \"repeat mode\".
        ]"
  "--player-external-http[
        Serve stream data through HTTP without running any player. This is
        useful to allow external devices like smartphones or streaming boxes to
        watch streams they wouldn\'t be able to otherwise.

        The default behavior is similar to the --player-continuous-http option,
        but no player program will be started, and the server will listen on all available
        connections instead of just in the local (loopback) interface.

        See --player-external-http-interface for choosing a specific network interface, and
        see --player-external-http-port for choosing a non-randomized port.

        Optionally, the --player-external-http-continuous option allows for disabling
        the continuous run-mode, so that Streamlink will stop when the stream ends.

        The URLs that can be used to access the stream will be printed to the
        console, and the server can be interrupted using CTRL-C.
        ]"
  "--player-external-http-continuous[
        Set the run-mode of --player-external-http to continuous or non-continuous.

        In the continuous run-mode, Streamlink will keep running after the stream has ended
        and will wait for the next HTTP request being made unless it gets shut down via CTRL-C.

        If set to non-continuous, Streamlink will stop once the stream has ended.

        Default is true.
        ]:player_external_http_continuous:"
  "--player-external-http-interface[
        The network interface on which the HTTP server will be listening on.
        If unset or set to \`0.0.0.0\`, all available interfaces will be bound.
        ]:player_external_http_interface:"
  "--player-external-http-port[
        A fixed port to use for the external HTTP server if that mode is
        enabled. Omit or set to \`0\` to use a random high ( \>1024) port.
        ]:player_external_http_port:"
  "--player-passthrough[
        A comma-delimited list of stream types to pass to the player as a URL to
        let it handle the transport of the stream instead.

        Stream types that can be converted into a playable URL are\:

        - hls
        - http

        Make sure your player can handle the stream type when using this.
        ]:player_passthrough:"
  "--player-no-close[
        By default Streamlink will close the player when the stream
        ends. This is to avoid \"dead\" GUI players lingering after a
        stream ends.

        It does however have the side-effect of sometimes closing a
        player before it has played back all of its cached data.

        This option will instead let the player decide when to exit.
        ]"
  {-t,--title}"[
        Change the title of the video player\'s window.

        Please see the \"Metadata variables\" section of Streamlink\'s CLI documentation for all available metadata variables.

        This option is only supported for the following players\: mpv, potplayer, vlc

        VLC specific information\:
            VLC does support special formatting variables on its own\:
            https\:\/\/wiki.videolan.org\/Documentation\:Format_String\/

            These variables are accessible in the --title option by adding a backslash
            in front of the dollar sign which VLC uses as its formatting character.

            For example, to put the current date in your VLC window title,
            the string \`\\\$A\` could be inserted inside the --title string.

        Example\:

            \%(prog)s -p mpv --title \"\{author\} - \{category\} - \{title\}\" \<URL\> \[STREAM\]
        ]:title:"
  {-o,--output}"[
        Write stream data to \`FILENAME\` instead of playing it. If \`FILENAME\` is set to \`-\` (dash), then the stream data will be
        written to stdout, similar to the --stdout argument.

        Non-existent directories and subdirectories will be created if they do not exist, if filesystem permissions allow.

        You will be prompted if the file already exists.

        Please see the \"Metadata variables\" section of Streamlink\'s CLI documentation for all available metadata variables.

        Unsupported characters in substituted variables will be replaced with an underscore.

        Example\:

            \%(prog)s --output \"\~\/recordings\/\{author\}\/\{category\}\/\{id\}-\{time\:\%\%Y\%\%m\%\%d\%\%H\%\%M\%\%S\}.ts\" \<URL\> \[STREAM\]
        ]:output:"
  {-O,--stdout}"[
        Write stream data to stdout instead of playing it.
        ]"
  {-r,--record}"[
        Open the stream in the player, while at the same time writing it to \`FILENAME\`. If \`FILENAME\` is set to \`-\` (dash),
        then the stream data will be written to stdout, similar to the --stdout argument, while still opening the player.

        Non-existent directories and subdirectories will be created if they do not exist, if filesystem permissions allow.

        You will be prompted if the file already exists.

        Please see the \"Metadata variables\" section of Streamlink\'s CLI documentation for all available metadata variables.

        Unsupported characters in substituted variables will be replaced with an underscore.

        Example\:

            \%(prog)s --record \"\~\/recordings\/\{author\}\/\{category\}\/\{id\}-\{time\:\%\%Y\%\%m\%\%d\%\%H\%\%M\%\%S\}.ts\" \<URL\> \[STREAM\]
        ]:record:"
  {-R,--record-and-pipe}"[
        Write stream data to stdout, while at the same time writing it to \`FILENAME\`.

        Non-existent directories and subdirectories will be created if they do not exist, if filesystem permissions allow.

        You will be prompted if the file already exists.

        Please see the \"Metadata variables\" section of Streamlink\'s CLI documentation for all available metadata variables.

        Unsupported characters in substituted variables will be replaced with an underscore.

        Example\:

            \%(prog)s --record-and-pipe \"\~\/recordings\/\{author\}\/\{category\}\/\{id\}-\{time\:\%\%Y\%\%m\%\%d\%\%H\%\%M\%\%S\}.ts\" \<URL\> \[STREAM\]
        ]:record_and_pipe:"
  "--fs-safe-rules[
        The rules used to make formatting variables filesystem-safe are chosen
        automatically according to the type of system in use. This overrides
        the automatic detection.

        Intended for use when Streamlink is running on a UNIX-like OS but writing
        to Windows filesystems such as NTFS\; USB devices using VFAT or exFAT\; CIFS
        shares that are enforcing Windows filename limitations, etc.

        These characters are replaced with an underscore for the rules in use\:

        - POSIX\: \`\\x00-\\x1F \/\`
        - Windows\: \`\\x00-\\x1F \\x7F \" \* \/ \: \< \> \? \\ \|\`
        ]:fs_safe_rules:(POSIX Windows)"
  {-f,--force}"[
        When using --output or --record, always write to file even if it already exists (overwrite).
        ]"
  "--progress[
        When using --output or --record, show or hide the download progress bar, or force it if there\'s no terminal.

        Default is yes.
        ]:progress:(yes force no)"
  "--force-progress[
        Deprecated in favor of --progress\=force.
        ]"
  "--url[
        A URL to attempt to extract streams from.

        Usually, the protocol of http(s) URLs can be omitted (\`https\:\/\/\`),
        depending on the implementation of the plugin being used.

        This is an alternative to setting the URL using a positional argument
        and can be useful if set in a config file.
        ]:url_param:"
  "--default-stream[
        Stream to play.

        Use \`best\` or \`worst\` for selecting the highest or lowest available
        quality.

        Fallback streams can be specified by using a comma-separated list\:

          \"720p,480p,best\"

        This is an alternative to setting the stream using a positional argument
        and can be useful if set in a config file.
        ]:default_stream:"
  "--stream-url[
        If possible, translate the resolved stream to a URL and print it.
        ]"
  "--retry-streams[
        Retry fetching the list of available streams until streams are found
        while waiting \`DELAY\` second(s) between each attempt. If unset, only one
        attempt will be made to fetch the list of streams available.

        The number of fetch retry attempts can be capped with --retry-max.
        ]:retry_streams:"
  "--retry-max[
        When using --retry-streams, stop retrying the fetch after \`COUNT\` retry
        attempt(s). Fetch will retry infinitely if \`COUNT\` is zero or unset.

        If --retry-max is set without setting --retry-streams, the delay between
        retries will default to 1 second.
        ]:retry_max:"
  "--retry-open[
        After a successful fetch, try \`ATTEMPTS\` time(s) to open the stream until
        giving up.

        Default is 1.
        ]:retry_open:"
  {--stream-types,--stream-priority}"[
        A comma-delimited list of stream types to allow.

        The order will be used to separate streams when there are multiple
        streams with the same name but different stream types. Any stream type
        not listed will be omitted from the available streams list.  An \`\*\` (asterisk) can
        be used as a wildcard to match any other type of stream, eg. muxed-stream.

        Default is \"hls,http,\*\".
        ]:stream_types:"
  "--stream-sorting-excludes[
        Fine tune the \`best\` and \`worst\` stream name synonyms by excluding unwanted streams.

        If all of the available streams get excluded, \`best\` and \`worst\` will become
        inaccessible and new special stream synonyms \`best-unfiltered\` and \`worst-unfiltered\`
        can be used as a fallback selection method.

        Uses a filter expression in the format\:

          \[operator\]\<value\>

        Valid operators are \`\>\`, \`\>\=\`, \`\<\` and \`\<\=\`. If no operator is specified then
        equality is tested.

        For example this will exclude streams ranked higher than \"480p\"\:

          --stream-sorting-excludes \"\>480p\"

        Multiple filters can be used by separating each expression with a comma.

        For example this will exclude streams from two quality types\:

          --stream-sorting-excludes \"\>480p,\>medium\"

        ]:stream_sorting_excludes:"
  "--ringbuffer-size[
        The maximum size of the ringbuffer. Mega- or kilobytes can be specified via the M or K suffix respectively.

        The ringbuffer is used as a temporary storage between the stream and the player.
        This allows Streamlink to download the stream faster than the player which reads the data from the ringbuffer.

        The smaller the size of the ringbuffer, the higher the chance of the player buffering if the download speed decreases,
        and the higher the size, the more data can be use as a storage to recover from volatile download speeds.

        Most players have their own additional cache and will read the ringbuffer\'s content as soon as data is available.
        If the player stops reading data while playback is paused, Streamlink will continue to download the stream in the
        background as long as the ringbuffer doesn\'t get full.

        Default is \"16M\".

        Note\: A smaller size is recommended on lower end systems (such as Raspberry Pi) when playing stream types that require
        some extra processing to avoid unnecessary background processing.
        ]:ringbuffer_size:"
  "--stream-segment-attempts[
        How many attempts should be done to download each segment before giving up.

        This applies to all different kinds of segmented stream types, such as DASH, HLS, etc.

        Default is 3.
        ]:stream_segment_attempts:"
  "--stream-segment-threads[
        The size of the thread pool used to download segments. Minimum value is \`1\` and maximum is \`10\`.

        This applies to all different kinds of segmented stream types, such as DASH, HLS, etc.

        Default is 1.
        ]:stream_segment_threads:"
  "--stream-segment-timeout[
        Segment connect and read timeout.

        This applies to all different kinds of segmented stream types, such as DASH, HLS, etc.

        Default is 10.0.
        ]:stream_segment_timeout:"
  "--stream-timeout[
        Timeout for reading data from streams.

        This applies to all different kinds of stream types, such as DASH, HLS, HTTP, etc.

        Default is 60.0.
        ]:stream_timeout:"
  "--mux-subtitles[
        Automatically mux available subtitles into the output stream.

        Needs to be supported by the used plugin.
        ]"
  "--hls-live-edge[
        Number of segments from the live stream\'s current live position to begin streaming.
        The size or length of each segment is determined by the streaming provider.

        Lower values will decrease the latency, but will also increase the chance of buffering, as there is less time for
        Streamlink to download segments and write their data to the output buffer. The number of parallel segment downloads
        can be set with --stream-segment-threads and the HLS playlist reload time to fetch and queue new segments can be
        overridden with --hls-playlist-reload-time.

        Default is 3.

        Note\: During live playback, the caching\/buffering settings of the used player will add additional latency. To adjust
        this, please refer to the player\'s own documentation for the required configuration. Player parameters can be set via
        --player-args.
        ]:hls_live_edge:"
  "--hls-segment-stream-data[
        Immediately write segment data into output buffer while downloading.
        ]"
  "--hls-playlist-reload-attempts[
        Max number of attempts when reloading the HLS playlist before giving up.

        Default is 3.
        ]:hls_playlist_reload_attempts:"
  "--hls-playlist-reload-time[
        Set a custom HLS playlist reload time value, either in seconds
        or by using one of the following keywords\:

        - segment\: The duration of the last segment in the current playlist
        - live-edge\: The sum of segment durations of the live edge value minus one
        - default\: The playlist\'s target duration metadata

        Default is default.
        ]:hls_playlist_reload_time:"
  "--hls-segment-ignore-names[
        A comma-delimited list of segment names that will get filtered out.

        Example\: --hls-segment-ignore-names 000,001,002

        This will ignore every segment that ends with 000.ts, 001.ts and 002.ts

        Default is None.
        ]:hls_segment_ignore_names:"
  "--hls-segment-key-uri[
        Override the segment encryption key URIs for encrypted streams.

        The value can be templated using the following variables, which will be
        replaced with their respective part from the source segment URI\:

          \{url\} \{scheme\} \{netloc\} \{path\} \{query\}

        Examples\:

          --hls-segment-key-uri \"https\:\/\/example.com\/hls\/encryption_key\"
          --hls-segment-key-uri \"\{scheme\}\:\/\/1.2.3.4\{path\}\{query\}\"
          --hls-segment-key-uri \"\{scheme\}\:\/\/\{netloc\}\/custom\/path\/to\/key\"

        Default is None.
        ]:hls_segment_key_uri:"
  "--hls-audio-select[
        Selects a specific audio source or sources, by language code or name,
        when multiple audio sources are available. Can be \`\*\` (asterisk) to download all
        audio sources.

        Examples\:

          --hls-audio-select \"English,German\"
          --hls-audio-select \"en,de\"
          --hls-audio-select \"\*\"

        Note\: This is only useful in special circumstances where the regular
        locale option fails, such as when multiple sources of the same language
        exists.
        ]:hls_audio_select:"
  "--hls-start-offset[
        Amount of time to skip from the beginning of the stream. For live
        streams, this is a negative offset from the end of the stream (rewind).

        Default is 00\:00\:00.
        ]:hls_start_offset:"
  "--hls-duration[
        Limit the playback duration, useful for watching segments of a stream.
        The actual duration may be slightly longer, as it is rounded to the
        nearest HLS segment.

        Default is unlimited.
        ]:hls_duration:"
  "--hls-live-restart[
        Skip to the beginning of a live stream, or as far back as possible.
        ]"
  "--dash-manifest-reload-attempts[
        Max number of attempts when reloading the DASH manifest before giving up.

        Default is 3.
        ]:dash_manifest_reload_attempts:"
  "--ffmpeg-ffmpeg[
        FFMPEG is used to access or mux separate video and audio streams. You
        can specify the location of the ffmpeg executable if it is not in your
        \`PATH\`.

        Example\: --ffmpeg-ffmpeg \"\/usr\/local\/bin\/ffmpeg\"
        ]:ffmpeg_ffmpeg:"
  "--ffmpeg-no-validation[
        Disable FFmpeg validation and version logging.
        ]"
  "--ffmpeg-verbose[
        Write the console output from ffmpeg to the console.
        ]"
  "--ffmpeg-verbose-path[
        Path to write the output from the ffmpeg console.
        ]:ffmpeg_verbose_path:"
  "--ffmpeg-fout[
        When muxing streams, set the output format to \`OUTFORMAT\`.

        Default is \"matroska\".

        Example\: --ffmpeg-fout \"mpegts\"
        ]:ffmpeg_fout:"
  "--ffmpeg-video-transcode[
        When muxing streams, transcode the video to \`CODEC\`.

        Default is \"copy\".

        Example\: --ffmpeg-video-transcode \"h264\"
        ]:ffmpeg_video_transcode:"
  "--ffmpeg-audio-transcode[
        When muxing streams, transcode the audio to \`CODEC\`.

        Default is \"copy\".

        Example\: --ffmpeg-audio-transcode \"aac\"
        ]:ffmpeg_audio_transcode:"
  "--ffmpeg-copyts[
        Forces the \`-copyts\` ffmpeg option and does not remove
        the initial start time offset value.
        ]"
  "--ffmpeg-start-at-zero[
        Enable the \`-start_at_zero\` ffmpeg option when using --ffmpeg-copyts.
        ]"
  "--http-proxy[
        A HTTP proxy to use for all HTTP and HTTPS requests, including WebSocket connections.

        Example\: --http-proxy \"http\:\/\/hostname\:port\/\"
        ]:http_proxy:"
  "*--http-cookie[
        A cookie to add to each HTTP request.

        Can be repeated to add multiple cookies.
        ]:http_cookie:"
  "*--http-header[
        A header to add to each HTTP request.

        Can be repeated to add multiple headers.
        ]:http_header:"
  "*--http-query-param[
        A query parameter to add to each HTTP request.

        Can be repeated to add multiple query parameters.
        ]:http_query_param:"
  "--http-ignore-env[
        Ignore HTTP settings set in the environment such as environment
        variables (\`HTTP_PROXY\`, etc) or \`\~\/.netrc\` authentication.
        ]"
  "--http-no-ssl-verify[
        Don\'t attempt to verify SSL certificates.

        Usually a bad idea, only use this if you know what you\'re doing.
        ]"
  "--http-disable-dh[
        Disable Diffie Hellman key exchange

        Usually a bad idea, only use this if you know what you\'re doing.
        ]"
  "--http-ssl-cert[
        SSL certificate to use.

        Expects a .pem file.
        ]:http_ssl_cert:"
  "--http-ssl-cert-crt-key[
        SSL certificate to use.

        Expects a .crt and a .key file.
        ]:http_ssl_cert_crt_key:"
  "--http-timeout[
        General timeout used by all HTTP requests except the ones covered by
        other options.

        Default is 20.0.
        ]:http_timeout:"
  "--webbrowser[
        Enable or disable support for Streamlink\'s webbrowser API.

        Streamlink\'s webbrowser API allows plugins which implement it to launch a web browser and extract data from websites
        which they otherwise couldn\'t do via the regular HTTP session in Python due to specific JavaScript restrictions.

        The web browser is run isolated and in a clean environment without access to regular user data.

        Streamlink currently only supports Chromium-based web browsers using the Chrome Devtools Protocol (CDP).
        This includes Chromium itself, Google Chrome, Microsoft Edge, Brave, Vivaldi, and others, but full support for
        third party Chromium forks is not guaranteed. If you encounter any issues, please try Chromium or Google Chrome instead.

        Default is true.
        ]:webbrowser:"
  "--webbrowser-executable[
        Path to the web browser\'s executable.

        By default, it is looked up automatically according to the rules of the used webbrowser API implementation.
        This usually involves a list of known executable names and fallback paths on all supported operating systems.
        ]:webbrowser_executable:"
  "--webbrowser-timeout[
        The maximum amount of time which the web browser can take to launch and execute.
        ]:webbrowser_timeout:"
  "--webbrowser-cdp-host[
        Host for the web browser\'s inter-process communication interface (CDP specific).

        Default is 127.0.0.1.
        ]:webbrowser_cdp_host:"
  "--webbrowser-cdp-port[
        Port for the web browser\'s inter-process communication interface (CDP specific).

        Tries to find a free port by default.
        ]:webbrowser_cdp_port:"
  "--webbrowser-cdp-timeout[
        The maximum amount of time for waiting on a single CDP command response.
        ]:webbrowser_cdp_timeout:"
  "--webbrowser-headless[
        Whether to launch the web browser in headless mode or not.
        When enabled, it stays completely hidden and doesn\'t require a desktop environment to run.

        Default is true.
        ]:webbrowser_headless:"
  "--afreeca-username[The username used to register with afreecatv.com.]:afreeca_username:"
  "--afreeca-password[A afreecatv.com account password to use with --afreeca-username.]:afreeca_password:"
  "--afreeca-purge-credentials[Purge cached AfreecaTV credentials to initiate a new session and reauthenticate.]"
  "--bbciplayer-username[The username used to register with bbc.co.uk.]:bbciplayer_username:"
  "--bbciplayer-password[A bbc.co.uk account password to use with --bbciplayer-username.]:bbciplayer_password:"
  "--bbciplayer-hd[Prefer HD streams over local SD streams, some live programmes may not be broadcast in HD.]"
  "--clubbingtv-username[The username used to register with Clubbing TV.]:clubbingtv_username:"
  "--clubbingtv-password[A Clubbing TV account password to use with --clubbingtv-username.]:clubbingtv_password:"
  "--crunchyroll-username[A Crunchyroll username to allow access to restricted streams.]:crunchyroll_username:"
  "--crunchyroll-password[
        A Crunchyroll password for use with --crunchyroll-username.

        If left blank you will be prompted.
    ]:crunchyroll_password:"
  "--crunchyroll-purge-credentials[Purge cached Crunchyroll credentials to initiate a new session and reauthenticate.]"
  "--crunchyroll-session-id[
        Set a specific session ID for crunchyroll, can be used to bypass
        region restrictions. If using an authenticated session ID, it is
        recommended that the authentication parameters be omitted as the
        session ID is account specific.

        Note\: The session ID will be overwritten if authentication is used
        and the session ID does not match the account.
    ]:crunchyroll_session_id:"
  "--niconico-email[The email or phone number associated with your Niconico account]:niconico_email:"
  "--niconico-password[The password of your Niconico account]:niconico_password:"
  "--niconico-user-session[
        Value of the user-session token.

        Can be used as an alternative to providing a password.
    ]:niconico_user_session:"
  "--niconico-purge-credentials[Purge cached Niconico credentials to initiate a new session and reauthenticate.]"
  "--niconico-timeshift-offset[
        Amount of time to skip from the beginning of a stream.

        Default is 00\:00\:00.
    ]:niconico_timeshift_offset:"
  "--openrectv-email[The email associated with your openrectv account, required to access any openrectv stream.]:openrectv_email:"
  "--openrectv-password[An openrectv account password to use with --openrectv-email.]:openrectv_password:"
  "--pixiv-sessionid[The pixiv.net sessionid that\'s used in pixiv\'s PHPSESSID cookie.]:pixiv_sessionid:"
  "--pixiv-devicetoken[The pixiv.net device token that\'s used in pixiv\'s device_token cookie.]:pixiv_devicetoken:"
  "--pixiv-purge-credentials[Purge cached Pixiv credentials to initiate a new session and reauthenticate.]"
  "--pixiv-performer[Select a co-host stream instead of the owner stream.]:pixiv_performer:"
  "--steam-email[A Steam account email address to access friends\/private streams]:steam_email:"
  "--steam-password[A Steam account password to use with --steam-email.]:steam_password:"
  "--streann-url[Source URL where the iframe is located, only required for direct URLs of ott.streann.com]:streann_url:"
  "--twitcasting-password[Password for private Twitcasting streams.]:twitcasting_password:"
  "--twitch-disable-ads[
        Skip embedded advertisement segments at the beginning or during a stream.
        Will cause these segments to be missing from the output.
    ]"
  "--twitch-disable-reruns[Do not open the stream if the target channel is currently broadcasting a rerun.]"
  "--twitch-low-latency[
        Enables low latency streaming by prefetching HLS segments.
        Sets --hls-segment-stream-data to true and --hls-live-edge to \`2\`, if it is higher.
        Reducing --hls-live-edge to \`1\` will result in the lowest latency possible, but will most likely cause buffering.

        In order to achieve true low latency streaming during playback, the player\'s caching\/buffering settings will
        need to be adjusted and reduced to a value as low as possible, but still high enough to not cause any buffering.
        This depends on the stream\'s bitrate and the quality of the connection to Twitch\'s servers. Please refer to the
        player\'s own documentation for the required configuration. Player parameters can be set via --player-args.

        Note\: Low latency streams have to be enabled by the broadcasters on Twitch themselves.
        Regular streams can cause buffering issues with this option enabled due to the reduced --hls-live-edge value.
    ]"
  "*--twitch-api-header[
        A header to add to each Twitch API HTTP request.

        Can be repeated to add multiple headers.

        Useful for adding authentication data that can prevent ads. See the plugin-specific documentation for more information.
    ]:twitch_api_header:"
  "*--twitch-access-token-param[
        A parameter to add to the API request for acquiring the streaming access token.

        Can be repeated to add multiple parameters.
    ]:twitch_access_token_param:"
  "--twitch-purge-client-integrity[Purge cached Twitch client-integrity token and acquire a new one.]"
  "--ustream-password[A password to access password protected UStream.tv channels.]:ustream_password:"
  "--ustvnow-username[Your USTV Now account username]:ustvnow_username:"
  "--ustvnow-password[Your USTV Now account password]:ustvnow_password:"
  "--wwenetwork-email[The email associated with your WWE Network account, required to access any WWE Network stream.]:wwenetwork_email:"
  "--wwenetwork-password[A WWE Network account password to use with --wwenetwork-email.]:wwenetwork_password:"
  "--yupptv-boxid[The yupptv.com boxid that\'s used in the BoxId cookie.]:yupptv_boxid:"
  "--yupptv-yuppflixtoken[The yupptv.com yuppflixtoken that\'s used in the YuppflixToken cookie.]:yupptv_yuppflixtoken:"
  "--yupptv-purge-credentials[Purge cached YuppTV credentials to initiate a new session and reauthenticate.]"
  "--zattoo-email[The email associated with your zattoo account, required to access any zattoo stream.]:zattoo_email:"
  "--zattoo-password[A zattoo account password to use with --zattoo-email.]:zattoo_password:"
  "--zattoo-purge-credentials[Purge cached zattoo credentials to initiate a new session and reauthenticate.]"
  "--zattoo-stream-types[
        A comma-delimited list of stream types which should be used.

        The following types are allowed\: dash,hls7

        Default is \"dash\".
    ]:zattoo_stream_types:"
  ":A URL to attempt to extract streams from.:"
  ":Stream to play.:"
)


_shtab_streamlink_cli() {
  local context state line curcontext="$curcontext" one_or_more='(-)*' remainder='(*)'

  if ((${_shtab_streamlink_cli_options[(I)${(q)one_or_more}*]} + ${_shtab_streamlink_cli_options[(I)${(q)remainder}*]} == 0)); then  # noqa: E501
    _shtab_streamlink_cli_options+=(': :_shtab_streamlink_cli_commands' '*::: :->streamlink')
  fi
  _arguments -C -s $_shtab_streamlink_cli_options

  case $state in
    streamlink)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:_shtab_streamlink_cli-$line[1]:"
      case $line[1] in
        
      esac
  esac
}



typeset -A opt_args
_shtab_streamlink_cli "$@"
