From: Alexis Murzeau <amubtdx@gmail.com>
Date: Sat, 6 Apr 2024 00:53:59 +0200
Subject: Fix tests with pytest v7

New tests were added that use ExceptionInfo.group_contains().
But that method only exists in pytest v8.
See also: https://github.com/streamlink/streamlink/pull/5901

pytest 8 is only available in unstable, this patch is used to
fix the streamlink build on testing until pytest 8 migrate to
testing.

Forwarded: not-needed
Author: Alexis Murzeau <amubtdx@gmail.com>
---
 tests/webbrowser/cdp/pytest_7_support.py | 90 ++++++++++++++++++++++++++++++++
 tests/webbrowser/cdp/test_client.py      |  5 ++
 tests/webbrowser/cdp/test_connection.py  |  5 ++
 3 files changed, 100 insertions(+)
 create mode 100644 tests/webbrowser/cdp/pytest_7_support.py

diff --git a/tests/webbrowser/cdp/pytest_7_support.py b/tests/webbrowser/cdp/pytest_7_support.py
new file mode 100644
index 0000000..78d643b
--- /dev/null
+++ b/tests/webbrowser/cdp/pytest_7_support.py
@@ -0,0 +1,90 @@
+import re
+import sys
+from typing import Union
+from typing import Tuple
+from typing import Type
+from typing import Optional
+from typing import Pattern
+
+def _stringify_exception(exc: BaseException) -> str:
+    try:
+        notes = getattr(exc, "__notes__", [])
+    except KeyError:
+        # Workaround for https://github.com/python/cpython/issues/98778 on
+        # Python <= 3.9, and some 3.10 and 3.11 patch versions.
+        HTTPError = getattr(sys.modules.get("urllib.error", None), "HTTPError", ())
+        if sys.version_info[:2] <= (3, 11) and isinstance(exc, HTTPError):
+            notes = []
+        else:
+            raise
+
+    return "\n".join(
+        [
+            str(exc),
+            *notes,
+        ]
+    )
+
+def _group_contains(
+    self,
+    exc_group: BaseExceptionGroup[BaseException],
+    expected_exception: Union[Type[BaseException], Tuple[Type[BaseException], ...]],
+    match: Union[str, Pattern[str], None],
+    target_depth: Optional[int] = None,
+    current_depth: int = 1,
+) -> bool:
+    """Return `True` if a `BaseExceptionGroup` contains a matching exception."""
+    if (target_depth is not None) and (current_depth > target_depth):
+        # already descended past the target depth
+        return False
+    for exc in exc_group.exceptions:
+        if isinstance(exc, BaseExceptionGroup):
+            if self._group_contains(
+                exc, expected_exception, match, target_depth, current_depth + 1
+            ):
+                return True
+        if (target_depth is not None) and (current_depth != target_depth):
+            # not at the target depth, no match
+            continue
+        if not isinstance(exc, expected_exception):
+            continue
+        if match is not None:
+            value = _stringify_exception(exc)
+            if not re.search(match, value):
+                continue
+        return True
+    return False
+
+def group_contains(
+    self,
+    expected_exception: Union[Type[BaseException], Tuple[Type[BaseException], ...]],
+    *,
+    match: Union[str, Pattern[str], None] = None,
+    depth: Optional[int] = None,
+) -> bool:
+    """Check whether a captured exception group contains a matching exception.
+
+    :param Type[BaseException] | Tuple[Type[BaseException]] expected_exception:
+        The expected exception type, or a tuple if one of multiple possible
+        exception types are expected.
+
+    :param str | Pattern[str] | None match:
+        If specified, a string containing a regular expression,
+        or a regular expression object, that is tested against the string
+        representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__`
+        using :func:`re.search`.
+
+        To match a literal string that may contain :ref:`special characters
+        <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.
+
+    :param Optional[int] depth:
+        If `None`, will search for a matching exception at any nesting depth.
+        If >= 1, will only match an exception if it's at the specified depth (depth = 1 being
+        the exceptions contained within the topmost exception group).
+    """
+    msg = "Captured exception is not an instance of `BaseExceptionGroup`"
+    assert isinstance(self.value, BaseExceptionGroup), msg
+    msg = "`depth` must be >= 1 if specified"
+    assert (depth is None) or (depth >= 1), msg
+    return self._group_contains(self.value, expected_exception, match, depth)
+
diff --git a/tests/webbrowser/cdp/test_client.py b/tests/webbrowser/cdp/test_client.py
index c0c2629..81e2dd5 100644
--- a/tests/webbrowser/cdp/test_client.py
+++ b/tests/webbrowser/cdp/test_client.py
@@ -7,8 +7,13 @@ from unittest.mock import ANY, AsyncMock, Mock, call
 
 import pytest
 import trio
+from tests.webbrowser.cdp import pytest_7_support
 from trio.testing import wait_all_tasks_blocked
 
+if not callable(getattr(pytest.ExceptionInfo, "group_contains", None)):
+    pytest.ExceptionInfo._group_contains = pytest_7_support._group_contains
+    pytest.ExceptionInfo.group_contains = pytest_7_support.group_contains
+
 from streamlink.compat import ExceptionGroup
 from streamlink.session import Streamlink
 from streamlink.webbrowser.cdp.client import CDPClient, CDPClientSession, RequestPausedHandler
diff --git a/tests/webbrowser/cdp/test_connection.py b/tests/webbrowser/cdp/test_connection.py
index b822ca2..172b636 100644
--- a/tests/webbrowser/cdp/test_connection.py
+++ b/tests/webbrowser/cdp/test_connection.py
@@ -9,9 +9,14 @@ from unittest.mock import AsyncMock
 
 import pytest
 import trio
+from tests.webbrowser.cdp import pytest_7_support
 from trio.testing import MockClock, wait_all_tasks_blocked
 from trio_websocket import CloseReason, ConnectionClosed, ConnectionTimeout  # type: ignore[import]
 
+if not callable(getattr(pytest.ExceptionInfo, "group_contains", None)):
+    pytest.ExceptionInfo._group_contains = pytest_7_support._group_contains
+    pytest.ExceptionInfo.group_contains = pytest_7_support.group_contains
+
 from streamlink.compat import ExceptionGroup
 from streamlink.webbrowser.cdp.connection import MAX_BUFFER_SIZE, CDPConnection, CDPEventListener, CDPSession
 from streamlink.webbrowser.cdp.devtools.target import SessionID, TargetID
